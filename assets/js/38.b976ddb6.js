(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{323:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"php面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#php面向对象"}},[t._v("#")]),t._v(" PHP面向对象")]),t._v(" "),s("p",[t._v("面向对象：由类得到具体的对象，由对象实现具体的工作")]),t._v(" "),s("h4",{attrs:{id:"面向对象三大特性："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特性："}},[t._v("#")]),t._v(" 面向对象三大特性：")]),t._v(" "),s("p",[s("strong",[t._v("封装")])]),t._v(" "),s("ul",[s("li",[t._v("封装就是把对象的属性和服务结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节。对外界形成一个边界(或者说形成一道屏障)，只保留有限的对外接口使之与外部发生联系")])]),t._v(" "),s("p",[s("strong",[t._v("继承")])]),t._v(" "),s("p",[s("strong",[t._v("多态")])]),t._v(" "),s("ul",[s("li",[t._v("不同的形态")])]),t._v(" "),s("h3",{attrs:{id:"声明类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明类"}},[t._v("#")]),t._v(" "),s("strong",[t._v("声明类")])]),t._v(" "),s("ol",[s("li",[t._v("关键字class")]),t._v(" "),s("li",[t._v("类名遵循大写开头的驼峰命名规范")]),t._v(" "),s("li",[t._v("类的属性和方法必须添加访问修饰符(private,protected,public,var)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[修饰符]class类名   //修饰符可以省略\n{\n\t[属性]\n\t[方法]\n}\n")])])]),s("p",[t._v("属性中的变量可以初始化，但是初始化的值必须是常数，这里的常数是指"),s("strong",[t._v("PHP脚本在编译阶段时就可以得到其值，而不依赖于运行时的信息才能求值")])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("目前高版本的PHP支持使用表达式初始化类属性，但是为了保证代码的正确和规范性，建议还是使用常量对属性进行初始化")])]),t._v(" "),s("h3",{attrs:{id:"类实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类实例化"}},[t._v("#")]),t._v(" 类实例化")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'小白'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jiao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'汪汪'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例化时，类名后面的括号可加可不加")]),t._v("\n")])])]),s("h3",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("p",[s("strong",[t._v("属性，方法的调用")])]),t._v(" "),s("p",[t._v("可以用  "),s("code",[t._v("->")]),t._v(" "),s("code",[t._v("对象运算符")]),t._v("这种方式来访问跟非静态属性")]),t._v(" "),s("p",[t._v("当一个方法在类定义内部被调用时，有一个可用的伪变量$this")]),t._v(" "),s("p",[t._v("在一个类中，可以访问一个特殊的指针 "),s("code",[t._v("$this")]),t._v("。如果当前类的一个属性为$attribute,则当前在该类中通过一个操作设置或访问该变量时，可以使用$this->attribute来引用")]),t._v(" "),s("p",[t._v("如下所示说明了如何在一个类中设置和访问属性：")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("classname")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$attribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("attribute")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("attribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("伪变量$this,就代表着当前正在使用的对象")])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'小白'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jiao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'汪汪'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" functon "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'我叫'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jiao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("传递赋值，引用赋值")])]),t._v(" "),s("h3",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),s("ul",[s("li",[t._v("访问控制(可见性约束)")]),t._v(" "),s("li",[t._v("魔术方法")]),t._v(" "),s("li",[t._v("静态方法，静态属性")]),t._v(" "),s("li",[t._v("重载")])]),t._v(" "),s("p",[s("strong",[t._v("封装")]),t._v("：")]),t._v(" "),s("p",[t._v("隐藏对象的属性和实现细节，仅对外提供公用的调用，控制在程序中属性的读取和修改的访问级别")]),t._v(" "),s("p",[s("strong",[t._v("可见性约束：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对属性或者方法的访问控制，是通过在前面添加关键字public(公有)，protected(受保护)或private(私有)来实现的")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("被定义为公有的类成员可以在任何地方被访问")])])]),t._v(" "),s("li",[s("p",[t._v("被定义为受保护的类成员则可以"),s("strong",[t._v("被其自身以及其子类和父类")]),t._v("访问")])]),t._v(" "),s("li",[s("p",[t._v("被定义为私有的类成员则"),s("strong",[t._v("只能被其定义所在的类访问")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("调用位置")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("public")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("protected")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("private")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("外部")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("×")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("子类中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("×")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("自身所在的类")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✔")])])])]),t._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public function __construct([参数])//此处双下划线\n{\n\t方法体...\n}\n")])])]),s("p",[t._v("创建实例的时候，使用 __construct对这个对象进行初始化")]),t._v(" "),s("h3",{attrs:{id:"析构函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#析构函数"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),s("p",[t._v("析构函数会在到某个对象的所有引用都被删除或者当对象被显示销毁时执行。")]),t._v(" "),s("p",[t._v("与构造函数相对的就是析构函数。"),s("strong",[t._v("析构函数允许在销毁一个类之前被调用执行")]),t._v("，它将完成一些操作或实现一些功能，这些操作或功能通常在所有对该类的引用都被重置或曹处作用域时自动发生。")]),t._v(" "),s("p",[t._v("与构造函数的命名类似，一个析构函数名称必须是 __destruct()。析构函数不能带有任何参数")]),t._v(" "),s("h3",{attrs:{id:"static-静态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-静态"}},[t._v("#")]),t._v(" static(静态)")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("static关键字定义静态 "),s("strong",[t._v("方法")]),t._v(" 和 "),s("strong",[t._v("属性")])])]),t._v(" "),s("li",[s("p",[t._v("声明类属性或方法为 "),s("strong",[t._v("静态")]),t._v("，就可以不实例化类而 "),s("strong",[t._v("直接访问")])])]),t._v(" "),s("li",[s("p",[t._v("静态属性不能通过一个类已实例化的对象来访问(但静态方法可以)")])]),t._v(" "),s("li",[s("p",[t._v("静态属性不可以由对象通过 _> 操作符来访问")])]),t._v(" "),s("li",[s("p",[t._v("由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("静态访问 :: / self::")]),t._v(" "),s("p",[t._v("内部/外部  类名 :: 属性名  类名 :: 方法名")]),t._v(" "),s("p",[t._v("内部调用   类名 :: 属性名  self   :: 方法名")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[t._v("#")]),t._v(" 重载")]),t._v(" "),s("p",[t._v('PHP所提供的"重载"(overloading)是指  **动态的"创建"类属性和方法。**我们是通过魔术方法(magic methods)来实现的')]),t._v(" "),s("p",[t._v("当调用当前环境下 "),s("strong",[t._v("未定义")]),t._v(" 或 "),s("strong",[t._v("不可见")]),t._v(" 的类属性或方法时，重载方法会被调用")]),t._v(" "),s("p",[s("strong",[t._v("属性重载")])]),t._v(" "),s("p",[t._v("在给不可访问属性赋值时，"),s("strong",[t._v("__set()")]),t._v(" 会被调用")]),t._v(" "),s("p",[t._v("读取不可访问属性赋值时，"),s("strong",[t._v("__get()")]),t._v(" 会被调用")]),t._v(" "),s("p",[t._v("当对不可访问属性调用 isset() 或 empty() 时，"),s("strong",[t._v("__isset()")]),t._v(" 会被调用")]),t._v(" "),s("p",[t._v("当对不可访问属性调用 unset() 时，"),s("strong",[t._v("__unset()")]),t._v(" 会被调用")]),t._v(" "),s("p",[s("strong",[t._v("方法重载")])]),t._v(" "),s("p",[t._v("在对象调用一个不可访问方法时，"),s("strong",[t._v("__call()")]),t._v(" 会被调用")]),t._v(" "),s("p",[t._v("在静态上下文中调用一个不可访问方法时，"),s("strong",[t._v("__callStatic()")]),t._v(" 会被调用")]),t._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("p",[t._v("子类继承父类所有 "),s("strong",[t._v("公有的")]),t._v(" 和 "),s("strong",[t._v("受保护的")]),t._v(" 属性和方法")]),t._v(" "),s("p",[t._v("继承关键字 "),s("strong",[t._v("extends")]),t._v(" 一个类继承另一个类，不能继承多个")]),t._v(" "),s("p",[t._v("派生类，子类是指继承于基类的类")]),t._v(" "),s("p",[t._v("基类，父类，超类是指被继承的类")]),t._v(" "),s("p",[s("strong",[t._v("重写：")])]),t._v(" "),s("p",[t._v("继承父类中的方法，子类中定义的与父类同名的方法")]),t._v(" "),s("p",[t._v("当一个子类重写其父类的方法时，PHP不会调用父类中已被重写的方法。是否调用父类的方法取决于子类")]),t._v(" "),s("p",[t._v("关键字 "),s("strong",[t._v("parent::")]),t._v("  访问父类中的被重写的属性和方法")]),t._v(" "),s("p",[s("strong",[t._v("final关键字：")])]),t._v(" "),s("p",[t._v("如果父类中的方法被声明为final，则子类无法重写该方法。如果一个类被声明为 "),s("strong",[t._v("final")]),t._v(" ，则不能被继承")]),t._v(" "),s("h3",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("p",[t._v('多态(Polymorphism)字面意思就是"多种状态"')]),t._v(" "),s("p",[t._v("接口的多种不同的实现方式即为多态")]),t._v(" "),s("p",[t._v("同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果")]),t._v(" "),s("p",[s("strong",[t._v("抽象类")])]),t._v(" "),s("ul",[s("li",[t._v("抽象类至少要有一个抽象方法 声明关键字 "),s("strong",[t._v("abstract")])]),t._v(" "),s("li",[t._v("抽象的方法只是声明了其调用方式(参数),不能定义其具体的功能实现")]),t._v(" "),s("li",[t._v("抽象类不能被实例化")])]),t._v(" "),s("p",[s("strong",[t._v("修饰关键字顺序")])]),t._v(" "),s("ul",[s("li",[t._v("类的属性和方法必须添加访问修饰符 (private,protected,public)")]),t._v(" "),s("li",[t._v("abstract 以及 final 必须声明在访问修饰符之前")]),t._v(" "),s("li",[t._v("static 必须声明在访问修饰符之后")])]),t._v(" "),s("h3",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),s("p",[t._v("使用接口(interface)，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。接口中也可以定义常量")]),t._v(" "),s("ul",[s("li",[t._v("不能有方法的具体定义和变量属性，只声明了方法名称和常量")])]),t._v(" "),s("p",[t._v("实现 "),s("strong",[t._v("关键字  implements")]),t._v(" 一个类可以实现多个接口")]),t._v(" "),s("p",[t._v("接口也可以继承 "),s("strong",[t._v("关键字 extends")])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("接口里定义的方法都是抽象方法，只有方法名称，没有方法体，不需要加抽象关键字 "),s("strong",[t._v("abstract")])])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类实现接口")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ainter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//完全写法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ainter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Binter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Cinter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接口继承接口")]),t._v("\nAinter "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Binter")]),t._v("\n")])])]),s("h3",{attrs:{id:"类型约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型约束"}},[t._v("#")]),t._v(" 类型约束")]),t._v(" "),s("p",[t._v("类型运算符")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("instanceof")]),t._v(" 用于确定一个PHP变量是否属于某一类class的实例")]),t._v(" "),s("li",[s("strong",[t._v("instanceof")]),t._v(" 也可以用于确定一个变量是不是继承自某一父类的子类的实例")]),t._v(" "),s("li",[s("strong",[t._v("instanceof")]),t._v(" 也可以用于确定一个变量是不是实现了某个接口的类的实例")])]),t._v(" "),s("p",[s("strong",[t._v("自动加载")])]),t._v(" "),s("p",[t._v("spl_autoload_register()函数可以注册任意数量的自动加载器，当使用尚未被定义的类和接口时自动去加载")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("spl_autoload_register "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("callable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$autoload_function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$prepend")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("autoload_function\n")])])]),s("p",[t._v("欲注册的自动装载函数。如果没有提供任何参数，则自动注册 autoload 的默认实现函数"),s("a",{attrs:{href:"https://www.php.net/manual/zh/function.spl-autoload.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("spl_autoload()"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("throw\n")])])]),s("p",[t._v("此参数设置了 "),s("code",[t._v("autoload_function")]),t._v(" 无法成功注册时， **spl_autoload_register()**是否抛出异常。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("prepend\n")])])]),s("p",[t._v("如果是 true，"),s("strong",[t._v("spl_autoload_register()")]),t._v(" 会添加函数到队列之首，而不是队列尾部。")]),t._v(" "),s("h3",{attrs:{id:"命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[t._v("#")]),t._v(" 命名空间")]),t._v(" "),s("p",[s("strong",[t._v("概述：")])]),t._v(" "),s("p",[t._v("在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题")]),t._v(" "),s("ol",[s("li",[t._v("用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。")]),t._v(" "),s("li",[t._v("为很长的标识符名称(通常时为了缓解第一类问题而定义的)创建一个别名(或简短)的名称，提高源代码的可读性")])]),t._v(" "),s("p",[s("strong",[t._v("定义命名空间：")])]),t._v(" "),s("ul",[s("li",[t._v("声明单个命名空间 namespace Project")]),t._v(" "),s("li",[t._v("定义子命名空间 namespace Project\\Sub\\Level")]),t._v(" "),s("li",[t._v("可以在同一个文件中定义多个命名空间")])]),t._v(" "),s("p",[t._v("命名空间通过关键字 "),s("strong",[t._v("namspace")]),t._v(" 来声明。如果一个文件中包含命名空间，它必须在其他所有代码之前声明命名空间")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义命名空间两种方式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Project1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 内容代码 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Project")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 内容代码 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("全局空间：")])]),t._v(" "),s("ul",[s("li",[t._v("如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间")]),t._v(" "),s("li",[t._v("在名称前加上前缀、表示该名称是全局空间中的名称")])]),t._v(" "),s("h2",{attrs:{id:"php目录操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#php目录操作"}},[t._v("#")]),t._v(" PHP目录操作")]),t._v(" "),s("p",[s("strong",[t._v("Table of Contents")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.chdir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("chdir"),s("OutboundLink")],1),t._v(" — 改变目录")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.chroot.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("chroot"),s("OutboundLink")],1),t._v(" — 改变根目录")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.closedir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("closedir"),s("OutboundLink")],1),t._v(" — 关闭目录句柄")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.dir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("dir"),s("OutboundLink")],1),t._v(" — 返回一个 Directory 类实例")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.getcwd.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("getcwd"),s("OutboundLink")],1),t._v(" — 取得当前工作目录")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.opendir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("opendir"),s("OutboundLink")],1),t._v(" — 打开目录句柄")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.readdir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("readdir"),s("OutboundLink")],1),t._v(" — 从目录句柄中读取条目")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.rewinddir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("rewinddir"),s("OutboundLink")],1),t._v(" — 倒回目录句柄")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.php.net/manual/zh/function.scandir.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("scandir"),s("OutboundLink")],1),t._v(" — 列出指定路径中的文件和目录")])])])}),[],!1,null,null,null);a.default=e.exports}}]);